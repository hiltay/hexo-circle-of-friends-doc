import{_ as s,c as a,o as e,af as l}from"./chunks/framework.DSZV70p2.js";const c=JSON.parse('{"title":"为友链朋友圈做贡献","description":"","frontmatter":{},"headers":[],"relativePath":"contributing.md","filePath":"contributing.md"}'),t={name:"contributing.md"};function h(n,i,r,p,o,k){return e(),a("div",null,[...i[0]||(i[0]=[l(`<h1 id="为友链朋友圈做贡献" tabindex="-1">为友链朋友圈做贡献 <a class="header-anchor" href="#为友链朋友圈做贡献" aria-label="Permalink to “为友链朋友圈做贡献”">​</a></h1><p>首先，感谢你考虑为本项目做出贡献！我们欢迎任何形式的贡献，从修复错误、改进文档到添加新功能。</p><p>本文档为 <code>hexo-circle-of-friends</code> 项目的贡献提供了简单的指导方案和标准工作流程。</p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to “目录”">​</a></h2><ul><li><a href="#为友链朋友圈做贡献">为友链朋友圈做贡献</a><ul><li><a href="#目录">目录</a></li><li><a href="#项目技术栈与架构">项目技术栈与架构</a></li><li><a href="#搭建开发环境">搭建开发环境</a><ul><li><a href="#前提条件">前提条件</a></li><li><a href="#步骤">步骤</a></li></ul></li><li><a href="#运行测试与检查">运行测试与检查</a></li><li><a href="#分支管理与拉取请求">分支管理与拉取请求</a></li><li><a href="#为文档做贡献">为文档做贡献</a></li></ul></li></ul><h2 id="项目技术栈与架构" tabindex="-1">项目技术栈与架构 <a class="header-anchor" href="#项目技术栈与架构" aria-label="Permalink to “项目技术栈与架构”">​</a></h2><p>本项目主要是一个 Rust 应用程序，带有一些用于特定部署场景的 Python 组件。</p><ul><li><p><strong>核心逻辑 (Rust):</strong></p><ul><li>主应用程序是一个由多个 crate 组成的 Rust 工作区： <ul><li><code>core</code>: 主要的数据处理逻辑。</li><li><code>downloader</code>: 负责抓取友链和文章页面。</li><li><code>db</code>: 管理数据库交互，支持 SQLite、MySQL 和 MongoDB。</li><li><code>api</code>: 一个基于 Axum 的 Web 服务器，用于提供数据接口。</li><li><code>tools</code>: 共享的工具函数。</li><li><code>data_structures</code>: 定义了整个项目使用的核心数据模型。</li></ul></li><li><strong>关键技术:</strong> 使用 <a href="https://tokio.rs/" target="_blank" rel="noreferrer">Tokio</a> 作为异步运行时，<a href="https://github.com/seanmonstar/reqwest" target="_blank" rel="noreferrer">Reqwest</a> 用于 HTTP 请求，<a href="https://github.com/launchbadge/sqlx" target="_blank" rel="noreferrer">SQLx</a> 用于数据库访问，以及 <a href="https://github.com/tokio-rs/axum" target="_blank" rel="noreferrer">Axum</a> 用于 API。</li></ul></li><li><p><strong>Python 组件:</strong></p><ul><li>提供了一个 <a href="https://fastapi.tiangolo.com/" target="_blank" rel="noreferrer">FastAPI</a> 应用 (<code>api/vercel.py</code>)，以便在 Vercel 上轻松部署。</li><li>依赖项由 <code>uv</code> 管理，并列在 <code>requirements.txt</code> 中。</li></ul></li><li><p><strong>配置:</strong></p><ul><li><code>fc_settings.yaml</code>: 主要的应用程序设置。</li><li><code>css_rules.yaml</code>: 包含用于网页抓取的 CSS 选择器。</li></ul></li></ul><h2 id="搭建开发环境" tabindex="-1">搭建开发环境 <a class="header-anchor" href="#搭建开发环境" aria-label="Permalink to “搭建开发环境”">​</a></h2><h3 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to “前提条件”">​</a></h3><ul><li><strong>Rust:</strong> 通过 <a href="https://rustup.rs/" target="_blank" rel="noreferrer">rustup</a> 安装 Rust 工具链。</li><li><strong>Python:</strong> Python 3.12 或更高版本。</li><li><strong>Git:</strong> 用于版本控制。</li></ul><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to “步骤”">​</a></h3><ol><li><p><strong>Fork 并克隆仓库:</strong> Fork <a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends" target="_blank" rel="noreferrer">Rock-Candy-Tea/hexo-circle-of-friends</a> 仓库，并将你的 fork 克隆到本地：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">YOUR_USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/hexo-circle-of-friends.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hexo-circle-of-friends</span></span></code></pre></div></li><li><p><strong>配置项目:</strong> 从模板创建你自己的设置文件：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fc_settings.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_settings.yaml</span></span></code></pre></div><p>对于本地开发，建议使用 <code>sqlite</code> 数据库，它不需要额外设置。请确保在你的 <code>my_settings.yaml</code> 中设置了 <code>DATABASE: &quot;sqlite&quot;</code>。</p></li><li><p><strong>构建 Rust 项目:</strong> 构建整个工作区，以确保所有依赖项都已获取并且代码可以编译。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li><li><p><strong>运行核心应用:</strong> 要执行抓取并填充数据库，请运行 <code>fcircle_core</code> 二进制文件。它将默认使用 <code>fc_settings.yaml</code>。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcircle_core</span></span></code></pre></div><p>这将在根目录中创建一个 <code>data.db</code> SQLite 文件。</p></li><li><p><strong>运行 API 服务器:</strong> 要提供数据服务，请运行 <code>fcircle_api</code> 二进制文件。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcircle_api</span></span></code></pre></div><p>API 将在 <code>http://localhost:8000</code> 上可用。</p></li></ol><h2 id="运行测试与检查" tabindex="-1">运行测试与检查 <a class="header-anchor" href="#运行测试与检查" aria-label="Permalink to “运行测试与检查”">​</a></h2><p>在提交任何更改之前，请确保所有测试和代码质量检查都通过。</p><ul><li><p><strong>运行测试:</strong> 请为你编写的组件或功能编写测试。要在本地运行测试，请运行：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-features</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-targets</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test-threads=1</span></span></code></pre></div></li><li><p><strong>检查格式化:</strong> 使用 <code>rustfmt</code> 来保持一致的代码风格。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fmt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --check</span></span></code></pre></div></li><li><p><strong>运行 Linter (Clippy):</strong> 使用 <code>clippy</code> 来捕捉常见错误并提高代码质量。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clippy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-targets</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-features</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> warnings</span></span></code></pre></div></li></ul><h2 id="分支管理与拉取请求" tabindex="-1">分支管理与拉取请求 <a class="header-anchor" href="#分支管理与拉取请求" aria-label="Permalink to “分支管理与拉取请求”">​</a></h2><ol><li><p><strong>创建分支:</strong> 基于 <code>main</code> 分支为你的功能或错误修复创建一个新分支。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-feature-name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div></li><li><p><strong>进行更改:</strong> 使用清晰简洁但概括全面的消息提交你的更改。</p></li><li><p><strong>推送并创建拉取请求:</strong> 将你的分支推送到你的 fork，并针对主仓库的 <code>main</code> 分支创建一个拉取请求（PR）。</p></li><li><p><strong>PR 清单:</strong></p><ul><li>为你的 PR 提供一个清晰的标题和描述。</li><li>确保所有测试、格式化检查和 linter 检查都通过。</li><li>如果你添加了新功能，请同时添加相应的测试。</li><li>如果你的更改影响了配置或需要新的设置步骤，请相应地更新文档。</li></ul></li></ol><h2 id="为文档做贡献" tabindex="-1">为文档做贡献 <a class="header-anchor" href="#为文档做贡献" aria-label="Permalink to “为文档做贡献”">​</a></h2><p>文档位于 <a href="https://github.com/hiltay/hexo-circle-of-friends-doc" target="_blank" rel="noreferrer">hexo-circle-of-friends-doc</a> 仓库中，并使用 <a href="https://docsify.js.org/" target="_blank" rel="noreferrer">Docsify</a> 构建。</p><p>为文档做贡献的步骤：</p><ol><li><p>克隆 <code>hexo-circle-of-friends-doc</code> 仓库。</p></li><li><p>在 <code>docs/</code> 目录中对 Markdown 文件进行更改。</p></li><li><p>要本地预览你的更改，可以使用 Docsify CLI：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果你还没有安装 docsify-cli</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docsify-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动文档服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docsify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span></span></code></pre></div></li><li><p>提交一个包含你更改的拉取请求。</p></li></ol>`,22)])])}const g=s(t,[["render",h]]);export{c as __pageData,g as default};
