import{_ as e,c as s,o as t,af as a}from"./chunks/framework.DSZV70p2.js";const k=JSON.parse('{"title":"Contributing to Friends Feed","description":"","frontmatter":{},"headers":[],"relativePath":"en/contributing.md","filePath":"en/contributing.md"}'),n={name:"en/contributing.md"};function l(r,i,o,h,c,p){return t(),s("div",null,[...i[0]||(i[0]=[a(`<h1 id="contributing-to-friends-feed" tabindex="-1">Contributing to Friends Feed <a class="header-anchor" href="#contributing-to-friends-feed" aria-label="Permalink to “Contributing to Friends Feed”">​</a></h1><p>Thank you for considering a contribution to this project! We welcome any form of contribution, from bug fixes and documentation improvements to new features.</p><p>This document provides simple guidelines and a standard workflow for contributing to the <code>hexo-circle-of-friends</code> project.</p><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-label="Permalink to “Table of Contents”">​</a></h2><ul><li><a href="#contributing-to-friends-feed">Contributing to Friends Feed</a><ul><li><a href="#table-of-contents">Table of Contents</a></li><li><a href="#project-tech-stack-architecture">Project Tech Stack &amp; Architecture</a></li><li><a href="#setting-up-the-development-environment">Setting Up the Development Environment</a><ul><li><a href="#prerequisites">Prerequisites</a></li><li><a href="#steps">Steps</a></li></ul></li><li><a href="#running-tests-checks">Running Tests &amp; Checks</a></li><li><a href="#branch-management-pull-requests">Branch Management &amp; Pull Requests</a></li><li><a href="#contributing-to-documentation">Contributing to Documentation</a></li></ul></li></ul><h2 id="project-tech-stack-architecture" tabindex="-1">Project Tech Stack &amp; Architecture <a class="header-anchor" href="#project-tech-stack-architecture" aria-label="Permalink to “Project Tech Stack &amp; Architecture”">​</a></h2><p>This project is primarily a Rust application with some Python components for specific deployment scenarios.</p><ul><li><p><strong>Core Logic (Rust):</strong></p><ul><li>The main application is a Rust workspace composed of several crates: <ul><li><code>core</code>: Main data-processing logic.</li><li><code>downloader</code>: Responsible for crawling friends’ links and article pages.</li><li><code>db</code>: Manages database interactions, supporting SQLite, MySQL, and MongoDB.</li><li><code>api</code>: A web server built on Axum that serves data endpoints.</li><li><code>tools</code>: Shared utility functions.</li><li><code>data_structures</code>: Defines the core data models used throughout the project.</li></ul></li><li><strong>Key technologies:</strong> Uses <a href="https://tokio.rs/" target="_blank" rel="noreferrer">Tokio</a> as the async runtime, <a href="https://github.com/seanmonstar/reqwest" target="_blank" rel="noreferrer">Reqwest</a> for HTTP requests, <a href="https://github.com/launchbadge/sqlx" target="_blank" rel="noreferrer">SQLx</a> for database access, and <a href="https://github.com/tokio-rs/axum" target="_blank" rel="noreferrer">Axum</a> for the API.</li></ul></li><li><p><strong>Python Components:</strong></p><ul><li>Provides a <a href="https://fastapi.tiangolo.com/" target="_blank" rel="noreferrer">FastAPI</a> app (<code>api/vercel.py</code>) for easy deployment on Vercel.</li><li>Dependencies are managed by <code>uv</code> and listed in <code>requirements.txt</code>.</li></ul></li><li><p><strong>Configuration:</strong></p><ul><li><code>fc_settings.yaml</code>: Main application settings.</li><li><code>css_rules.yaml</code>: Contains CSS selectors used for web scraping.</li></ul></li></ul><h2 id="setting-up-the-development-environment" tabindex="-1">Setting Up the Development Environment <a class="header-anchor" href="#setting-up-the-development-environment" aria-label="Permalink to “Setting Up the Development Environment”">​</a></h2><h3 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to “Prerequisites”">​</a></h3><ul><li><strong>Rust:</strong> Install the Rust toolchain via <a href="https://rustup.rs/" target="_blank" rel="noreferrer">rustup</a>.</li><li><strong>Python:</strong> Python 3.12 or higher.</li><li><strong>Git:</strong> For version control.</li></ul><h3 id="steps" tabindex="-1">Steps <a class="header-anchor" href="#steps" aria-label="Permalink to “Steps”">​</a></h3><ol><li><p><strong>Fork &amp; Clone the Repository:</strong> Fork the <a href="https://github.com/Rock-Candy-Tea/hexo-circle-of-friends" target="_blank" rel="noreferrer">Rock-Candy-Tea/hexo-circle-of-friends</a> repo, then clone your fork locally:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">YOUR_USERNAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/hexo-circle-of-friends.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hexo-circle-of-friends</span></span></code></pre></div></li><li><p><strong>Configure the Project:</strong> Create your own settings file from the template:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fc_settings.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_settings.yaml</span></span></code></pre></div><p>For local development, we recommend using the <code>sqlite</code> database, which requires no additional setup. Ensure <code>DATABASE: &quot;sqlite&quot;</code> is set in your <code>my_settings.yaml</code>.</p></li><li><p><strong>Build the Rust Project:</strong> Build the entire workspace to fetch all dependencies and ensure the code compiles.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li><li><p><strong>Run the Core Application:</strong> To crawl and populate the database, run the <code>fcircle_core</code> binary. It will use <code>fc_settings.yaml</code> by default.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcircle_core</span></span></code></pre></div><p>This creates an SQLite file named <code>data.db</code> in the root directory.</p></li><li><p><strong>Run the API Server:</strong> To serve the data, run the <code>fcircle_api</code> binary.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --bin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fcircle_api</span></span></code></pre></div><p>The API will be available at <code>http://localhost:8000</code>.</p></li></ol><h2 id="running-tests-checks" tabindex="-1">Running Tests &amp; Checks <a class="header-anchor" href="#running-tests-checks" aria-label="Permalink to “Running Tests &amp; Checks”">​</a></h2><p>Before submitting any changes, make sure all tests and code-quality checks pass.</p><ul><li><p><strong>Run Tests:</strong> Write tests for any components or features you contribute. To run tests locally:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-features</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-targets</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --test-threads=1</span></span></code></pre></div></li><li><p><strong>Format Check:</strong> Use <code>rustfmt</code> to maintain a consistent code style.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fmt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --check</span></span></code></pre></div></li><li><p><strong>Run Linter (Clippy):</strong> Use <code>clippy</code> to catch common mistakes and improve code quality.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clippy</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workspace</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-targets</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-features</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> warnings</span></span></code></pre></div></li></ul><h2 id="branch-management-pull-requests" tabindex="-1">Branch Management &amp; Pull Requests <a class="header-anchor" href="#branch-management-pull-requests" aria-label="Permalink to “Branch Management &amp; Pull Requests”">​</a></h2><ol><li><p><strong>Create a Branch:</strong> Create a new branch based on <code>main</code> for your feature or bug fix.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-feature-name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div></li><li><p><strong>Make Changes:</strong> Commit your changes with clear, concise, and descriptive messages.</p></li><li><p><strong>Push &amp; Create PR:</strong> Push your branch to your fork and open a pull request (PR) against the <code>main</code> branch of the upstream repository.</p></li><li><p><strong>PR Checklist:</strong></p><ul><li>Provide a clear title and description for your PR.</li><li>Ensure all tests, formatting, and lint checks pass.</li><li>Add corresponding tests if you introduce new features.</li><li>Update documentation if your changes affect configuration or require new setup steps.</li></ul></li></ol><h2 id="contributing-to-documentation" tabindex="-1">Contributing to Documentation <a class="header-anchor" href="#contributing-to-documentation" aria-label="Permalink to “Contributing to Documentation”">​</a></h2><p>Documentation lives in the <a href="https://github.com/hiltay/hexo-circle-of-friends-doc" target="_blank" rel="noreferrer">hexo-circle-of-friends-doc</a> repository and is built with <a href="https://docsify.js.org/" target="_blank" rel="noreferrer">Docsify</a>.</p><p>Steps to contribute to the docs:</p><ol><li><p>Clone the <code>hexo-circle-of-friends-doc</code> repository.</p></li><li><p>Make changes to the Markdown files in the <code>docs/</code> directory.</p></li><li><p>To preview your changes locally, use the Docsify CLI:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install docsify-cli if you haven&#39;t</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docsify-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Serve the docs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docsify</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> serve</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs</span></span></code></pre></div></li><li><p>Submit a pull request with your changes.</p></li></ol>`,22)])])}const g=e(n,[["render",l]]);export{k as __pageData,g as default};
